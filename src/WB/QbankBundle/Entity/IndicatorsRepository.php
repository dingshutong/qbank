<?php

namespace WB\QbankBundle\Entity;

use Doctrine\ORM\EntityRepository;
use WB\QbankBundle\Enums\IndicatorTreeTypes;

/**
 * IndicatorsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IndicatorsRepository extends EntityRepository
{
    public function countIndicators()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(i.id)
                FROM WBQbankBundle:Indicators i'
            );

        return $query->getSingleScalarResult();
    }

    public function searchIndicators($classified, $published, $sort, $keyword, $treeType = IndicatorTreeTypes::Groups)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();
        $query
            ->select('i')
            ->from('WBQbankBundle:Indicators', 'i')
            ->orderBy('i.name', $sort);

        if ($keyword) {
            $query
                ->leftJoin('i.indicatorAlias', 'a')
                ->where(
                    $query->expr()->orX(
                        $query->expr()->like('i.name', ':keyword'),
                        $query->expr()->like('i.description', ':keyword'),
                        $query->expr()->like('a.name', ':keyword')
                    )
                )
                ->setParameter('keyword', "%" . $keyword . "%");
        }

        switch($treeType) {
            case IndicatorTreeTypes::Groups: $paramTreeType = "indicatorGrpRef"; break;
            case IndicatorTreeTypes::Collections: $paramTreeType = "indicatorCollRef"; break;
        }

        if (false !== $classified) {
            $query
                ->leftJoin('i.' . $paramTreeType, 'g')
                ->andWhere("g.id IS " . $classified);
        }

        if (false !== $published) {
            $query
                ->andWhere("i.published = :published")
                ->setParameter('published', $published);
        }

        $q = $query->getQuery();
        return $q->getResult();
    }

}
