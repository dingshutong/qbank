<?php

namespace WB\QbankBundle\Entity;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Exception;
use WB\QbankBundle\DTO\QuestionnaireDTO;
use WB\QbankBundle\DTO\QuestionnaireQuestionDTO;

/**
 * QuestionnaireModulesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionnaireModulesRepository extends EntityRepository
{
    public function countQuestionnaires()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT COUNT(t.id)
                FROM WBQbankBundle:QuestionnaireModules t'
            );

        return $query->getSingleScalarResult();
    }

    public function searchQuestionnaires($classified, $published, $keyword, $excludedIds)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();
        $query
            ->select('q')
            ->from('WBQbankBundle:QuestionnaireModules', 'q')
            ->orderBy('q.name', 'ASC');

        if ($keyword) {
            $query
                ->leftJoin('q.questionnaireModuleQuestions', 'qq')
                ->where(
                    $query->expr()->orX(
                        $query->expr()->like('q.name', ':keyword'),
                        $query->expr()->like('q.description', ':keyword'),
                        $query->expr()->like('qq.description', ':keyword'),
                        $query->expr()->like('qq.literalText', ':keyword')
                    /*                        $query->expr()->like('qq.name', ':keyword'),
                                            $query->expr()->like('qq.preText', ':keyword'),
                                            $query->expr()->like('qq.postText', ':keyword'),
                                            $query->expr()->like('qq.valPostText', ':keyword'),
                                            $query->expr()->like('qq.notes', ':keyword'),
                                            $query->expr()->like('qq.instructions', ':keyword'),
                                            $query->expr()->like('qq.universe', ':keyword')*/
                    )
                )
                ->setParameter('keyword', "%" . $keyword . "%");
        }

        if (false !== $classified) {
            $query
                ->leftJoin('q.questionnaireGroupRelModules', 'g')
                ->andWhere("g.id IS " . $classified);
        }

        if (false !== $published) {
            $query
                ->andWhere("q.published = :published")
                ->setParameter('published', $published);
        }

        if (!empty($excludedIds)) {
            $query
                ->andWhere($query->expr()->notIn('q.id', ':excludedIds'))
                ->setParameter('excludedIds', $excludedIds);
        }


        $q = $query->getQuery();
        return $q->getResult();
    }

    public static function updateQuestionnairePublished(EntityManager $em, $questionnaireId,$published) {
        //published 0 ili 1
        $questionnaire= $em->getRepository('WBQbankBundle:QuestionnaireGroups')->find($questionnaireId);
        $questionnaire->setPublished($published);
        $em->flush();
    }

    public static function getQuestionDTOs(EntityManager $em, $questionnaireId)
    {
        $query = $em->createQuery('SELECT NEW \WB\QbankBundle\DTO\QuestionnaireQuestionDTO(q.id,q.name,q.description,q.weight,q.visualRepFormat, IDENTITY (q.classificationId)) FROM WBQbankBundle:QuestionnaireModuleQuestions q WHERE q.questModuleId =' . $questionnaireId . ' ORDER BY q.weight  ' );
        $questions = $query->getResult();
        return $questions;

    }

    public static function getResourceDTOs(EntityManager $em, $questionnaireId)
    {
        $query = $em->createQuery('SELECT NEW \WB\QbankBundle\DTO\QuestionnaireResourceDTO(r.id,r.title,r.description,r.location,r.useOfLayout,r.fileType) FROM WBQbankBundle:QuestionnaireModuleResources r WHERE r.questModuleId =' . $questionnaireId);
        $resources = $query->getResult();
        return $resources;
    }

    /**
     * @param EntityManager $em
     * @param $questionnaireId
     * @return QuestionnaireDTO
     */
    public static function getQuestionnaireDTOs(EntityManager $em, $questionnaireId)
    {
        try{
        $query = $em->createQuery('SELECT NEW \WB\QbankBundle\DTO\QuestionnaireDTO(q.id,q.name,q.description,q.notes,q.published,q.weight) FROM WBQbankBundle:QuestionnaireModules q WHERE q.id =' . $questionnaireId);
            $questionnaire = $query->getResult();
            return $questionnaire[0];

        }
        catch (Exception $ex){
            $a = 2;
        }

    }


}
